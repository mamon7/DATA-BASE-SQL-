it 명언:백문 불여 일타

화면구현
▼
jsp
▲
오라클


구조: 테이블(ddl)=>자료 데이터
열: 컬럼
행: 레코드(고유한 자료)

데이터 정의(creat  drop  alter)  (DDL)
            생성    삭제   수정

데이터 처리(select  insertr    delete  update)  (DML)
             검색   삽입(등록)  삭제    수정

출발지 =>  도착지
제약조건  제약조건

핵심 용어
테이블(Table), 기본키(Primary Key), 외래키(Foreign Key), 무결성 제약 조건(Integrity Constraint), 참조
무결성(Referential Integrity), 트랜잭션(Transaction), DDL(Data Definition Language), DML(Data Manipulation
Language), DCL(Data Control Language), 인덱스(Index)행=가로줄(row), 열=세로줄(column)


CREATE TAVELE 테이블이름(
 열이름 데이터 타입[DEFAULT값] [NOT NULL(제약조건)] => 컬럼
 열이름 데이터 타입[DEFAULT값] [NOT NULL(제약조건)] => 컬럼
[PRIMARY KEY (열 리스트),]<= 기본키
{[FOREIGN KEY (열 리스트 ) <= 외래키 REFERENCES 테이블이름 [(열이름)][ ON DELETE 옵션 ]
[ ON UPDATE 옵션 ] ], }*
[CHECK (조건식) | UNIQUE(열이름) ] ) ;


테이블 삭제,이름 변경
테이블 삭제 : DROP TABLE 테이블이름

테이블 내용 삭제 : TRUNCATE TABLE 테이블이름

테이블이름 변경:

(RENAME TABLE 이전테이블이름 TO 새로운테이블이름),

(ALTER TABLE 이전테이블이름 RENAME 새로운테이블이름)


구조화=> 틀
데이터 생성 :INSERT :삽입 형태로 신규 데이터를 테이블에 저장
데이터 조회 :SELECT :테이블의 내용을 조회
데이터 변경 :UPDATE :테이블의 내용을 변경
데이터 삭제 :DELETE :테이블의 내용을 삭제

데이터 삽입(INSERT)
A INSERT INTO table_name (column1, column2, ..) VALUES (value1, value2, ...);
B INSERT INTO table_name VALUES (value1, value2, ...);

데이터 조회(SELECT)
데이터 수정(UPDATE)
데이터 삭제(DELETE)

SELECT * FROM `salaries` WHERE emp_no = 1001;워얼 뒤에는 ★제약조건


오라클 3장에 중요함.

20200618 오늘 집에서 할 실습 데이터베이스 문제


-- 이름: demo_madang.sql
-- 설명
-- madang 스키마를 생성하고 MADANG 서점 실습테이블과 데이터를 입력한다.
-- 본스크립트는 system 계정에서 실행해야한다.
--
-- SQLPlus 실행방법
-- SQL>@demo_madang.sql

-- SQL Developer에서 실행하려면
-- system 계정으로 접속하여 스크립트를 conn madang/madang; 문장까지 실행한다.

select phone           select 컬럼
from customer          from  테이블
where name='김연아';   where 제약조건 

(select 문의 기본 문법) 암기 ★
오늘 배운것 정리
1.테이블
- 데이터 저장 공간		
2.데이터
-데이터베이스를 구축하기 위해 스키마, 테이블, 도메인, 인덱스, 뷰와 같은 오브젝트에 대한 DDL 적용이 필요
3.DML 명령어

4.DDL 명령어

5.SELECT

6.마당서점: Book,Orders,Customer 테이블+데이타

DISTINCT(중복제거 키워드)

★WHERE 조건★
--제약조건--


-------------------------------------------------------------------------------------------------------------------
-- [system 계정에서 - Oracle 11g, 12c 경우] - madang 계정 생성
DROP USER madang CASCADE; -- 확인 필요?
CREATE USER madang IDENTIFIED BY madang DEFAULT TABLESPACE users TEMPORARY TABLESPACE temp PROFILE DEFAULT;
GRANT CONNECT, RESOURCE TO madang;
GRANT CREATE VIEW, CREATE SYNONYM TO madang;
GRANT UNLIMITED TABLESPACE TO madang;
ALTER USER madang ACCOUNT UNLOCK;

-- [system 계정에서 - Oracle 18c 경우] - madang 계정 생성
-- Oracle 18g는 사용자 이름에 c##을 붙이고, GRANT UNLIMITED 명령을 추가하여야함.....
DROP USER c##madang CASCADE; -- 확인 필요?
CREATE USER c##madang IDENTIFIED BY madang DEFAULT TABLESPACE users TEMPORARY TABLESPACE temp PROFILE DEFAULT;
GRANT CONNECT, RESOURCE TO c##madang;
GRANT CREATE VIEW, CREATE SYNONYM TO c##madang;
GRANT UNLIMITED TABLESPACE TO c##madang;
ALTER USER c##madang ACCOUNT UNLOCK;



-------------------------------------------------------------------------------------------------------------------
-- [madang 계정에서] -- 여기서 부터는 madang 계정으로 접속한다.
-- conn madang/madang; 

-- 처음 실행시는 아래 4문장의 오류는 무시한다.  
DROP TABLE Orders ;
DROP TABLE Book ;
DROP TABLE Customer ;
DROP TABLE Imported_Book ; 

CREATE TABLE Book (
  bookid      NUMBER(2) PRIMARY KEY,
  bookname    VARCHAR2(40),
  publisher   VARCHAR2(40),
  price       NUMBER(8) 
);

CREATE TABLE  Customer (
  custid      NUMBER(2) PRIMARY KEY,  
  name        VARCHAR2(40),
  address     VARCHAR2(50),
  phone       VARCHAR2(20)
);


CREATE TABLE Orders (
  orderid NUMBER(2) PRIMARY KEY,
  custid  NUMBER(2) REFERENCES Customer(custid),
  bookid  NUMBER(2) REFERENCES Book(bookid),
  saleprice NUMBER(8) ,
  orderdate DATE
);
-- Book, Customer, Orders 데이터 생성
INSERT INTO Book VALUES(1, '축구의 역사', '굿스포츠', 7000);
INSERT INTO Book VALUES(2, '축구아는 여자', '나무수', 13000);
INSERT INTO Book VALUES(3, '축구의 이해', '대한미디어', 22000);
INSERT INTO Book VALUES(4, '골프 바이블', '대한미디어', 35000);
INSERT INTO Book VALUES(5, '피겨 교본', '굿스포츠', 8000);
INSERT INTO Book VALUES(6, '역도 단계별기술', '굿스포츠', 6000);
INSERT INTO Book VALUES(7, '야구의 추억', '이상미디어', 20000);
INSERT INTO Book VALUES(8, '야구를 부탁해', '이상미디어', 13000);
INSERT INTO Book VALUES(9, '올림픽 이야기', '삼성당', 7500);
INSERT INTO Book VALUES(10, 'Olympic Champions', 'Pearson', 13000);

INSERT INTO Customer VALUES (1, '박지성', '영국 맨체스타', '000-5000-0001');
INSERT INTO Customer VALUES (2, '김연아', '대한민국 서울', '000-6000-0001');  
INSERT INTO Customer VALUES (3, '장미란', '대한민국 강원도', '000-7000-0001');
INSERT INTO Customer VALUES (4, '추신수', '미국 클리블랜드', '000-8000-0001');
INSERT INTO Customer VALUES (5, '박세리', '대한민국 대전',  NULL);

-- 주문(Orders) 테이블의 책값은 할인 판매를 가정함
INSERT INTO Orders VALUES (1, 1, 1, 6000, TO_DATE('2014-07-01','yyyy-mm-dd')); 
INSERT INTO Orders VALUES (2, 1, 3, 21000, TO_DATE('2014-07-03','yyyy-mm-dd'));
INSERT INTO Orders VALUES (3, 2, 5, 8000, TO_DATE('2014-07-03','yyyy-mm-dd')); 
INSERT INTO Orders VALUES (4, 3, 6, 6000, TO_DATE('2014-07-04','yyyy-mm-dd')); 
INSERT INTO Orders VALUES (5, 4, 7, 20000, TO_DATE('2014-07-05','yyyy-mm-dd'));
INSERT INTO Orders VALUES (6, 1, 2, 12000, TO_DATE('2014-07-07','yyyy-mm-dd'));
INSERT INTO Orders VALUES (7, 4, 8, 13000, TO_DATE( '2014-07-07','yyyy-mm-dd'));
INSERT INTO Orders VALUES (8, 3, 10, 12000, TO_DATE('2014-07-08','yyyy-mm-dd')); 
INSERT INTO Orders VALUES (9, 2, 10, 7000, TO_DATE('2014-07-09','yyyy-mm-dd')); 
INSERT INTO Orders VALUES (10, 3, 8, 13000, TO_DATE('2014-07-10','yyyy-mm-dd'));

-- 여기는 3장에서 사용되는 Imported_book 테이블

CREATE TABLE Imported_Book (
  bookid      NUMBER ,
  bookname    VARCHAR(40),
  publisher   VARCHAR(40),
  price       NUMBER(8) 
);
INSERT INTO Imported_Book VALUES(21, 'Zen Golf', 'Pearson', 12000);
INSERT INTO Imported_Book VALUES(22, 'Soccer Skills', 'Human Kinetics', 15000);

COMMIT;
-- EXIT
-----------------------------------------------------------------------------------------------------------------
-- [질의 3-1] 모든 도서의 이름과 가격을 검색하시오.
SELECT	bookname, price
FROM	Book;

SELECT	price, bookname
FROM	Book;

-- [질의 3-2] 모든 도서의 도서번호, 도서이름, 출판사, 가격을 검색하시오.
SELECT	bookid, bookname, publisher, price
FROM	Book;

-- [질의 3-3] 도서 테이블에 있는 모든 출판사를 검색하시오.
SELECT	publisher
FROM	Book;

SELECT DISTINCT	publisher
FROM		Book;

-- [질의 3-4] 가격이 20,000원 미만인 도서를 검색하시오.
SELECT	*
FROM	Book
WHERE	price < 20000;

-- [질의 3-5] 가격이 10,000원 이상 20,000 이하인 도서를 검색하시오.
SELECT	*
FROM	Book
WHERE	price BETWEEN 10000 AND 20000;

SELECT	*
FROM	Book
WHERE	price >= 10000 AND price <= 20000;

-- [질의 3-6] 출판사가 ‘굿스포츠’ 혹은 ‘대한미디어’ 인 도서를 검색하시오.
SELECT	*
FROM	Book
WHERE	publisher IN ('굿스포츠', '대한미디어');

SELECT	*
FROM	Book
WHERE	publisher NOT IN ('굿스포츠', '대한미디어');

-- [질의 3-7] ‘축구의 역사’를 출간한 출판사를 검색하시오.
SELECT	bookname, publisher
FROM	Book
WHERE	bookname LIKE '축구의 역사';

-- [질의 3-8] 도서이름에 ‘축구’ 가 포함된 출판사를 검색하시오.
SELECT	bookname, publisher
FROM	Book
WHERE	bookname LIKE '%축구%';

-- [질의 3-9] 도서이름의 왼쪽 두 번째 위치에 ‘구’라는 문자열을 갖는 도서를 검색하시오.
SELECT	*
FROM	Book
WHERE	bookname LIKE '_구%';

-- [질의 3-10] 축구에 관한 도서 중 가격이 20,000원 이상인 도서를 검색하시오.
SELECT	*
FROM	Book
WHERE	bookname LIKE '%축구%' AND price >= 20000;

-- [질의 3-11] 출판사가 ‘굿스포츠’ 혹은 ‘대한미디어’ 인 도서를 검색하시오.
SELECT	*
FROM	Book
WHERE	publisher ='굿스포츠' OR publisher ='대한미디어';

-- [질의 3-12] 도서를 이름순으로 검색하시오. 
SELECT	*
FROM	Book
ORDER BY	bookname;

-- [질의 3-13] 도서를 가격순으로 검색하고, 가격이 같으면 이름순으로 검색하시오.
SELECT	*
FROM	Book
ORDER BY	price, bookname;

-- [질의 3-14] 도서를 가격의 내림차순으로 검색하시오. 
-- 만약 가격이 같다면 출판사의 오름차순으로 검색한다.
SELECT 	*
FROM 	Book
ORDER BY 	price DESC, publisher ASC;

-- [질의 3-15] 고객이 주문한 도서의 총 판매액을 구하시오.
SELECT	SUM(saleprice)
FROM	Orders;

SELECT	SUM(saleprice) AS 총매출
FROM	Orders;

-- [질의 3-16] 2번 김연아 고객이 주문한 도서의 총 판매액을 구하시오.
SELECT	SUM(saleprice) AS 총매출
FROM	Orders
WHERE	custid=2;

-- [질의 3-17] 고객이 주문한 도서의 총 판매액, 평균값, 최저가, 최고가를 구하시오.
SELECT	SUM(saleprice) AS Total,
	AVG(saleprice) AS Average,
	MIN(saleprice) AS Minimum,
	MAX(saleprice) AS Maximum
FROM	Orders;

-- [질의 3-18] 마당서점의 도서 판매 건수를 구하시오.
SELECT	COUNT(*)
FROM	Orders;

-- [질의 3-19] 고객별로 주문한 도서의 총 수량과 총 판매액을 구하시오.
SELECT	custid, COUNT(*) AS 도서수량, SUM(saleprice) AS 총액
FROM	Orders
GROUP BY	custid;

-- [질의 3-20] 가격이 8,000원 이상인 도서를 구매한 고객에 대하여 고객별 주문 도서의 총 수량을 구하시오. 
-- 단, 두 권 이상 구매한 고객만 구한다.
SELECT	custid, COUNT(*) AS 도서수량
FROM	Orders
WHERE	saleprice >= 8000
GROUP BY	custid
HAVING	count(*) >= 2;

-- [질의 3-21] 고객과 고객의 주문에 관한 데이터를 모두 보이시오.
SELECT	*
FROM	Customer, Orders
WHERE	Customer.custid=Orders.custid;

-- [질의 3-22] 고객과 고객의 주문에 관한 데이터를 고객별로 정렬하여 보이시오.
SELECT	*
FROM	Customer, Orders
WHERE	Customer.custid=Orders.custid
ORDER BY	Customer.custid;

-- [질의 3-23] 고객의 이름과 고객이 주문한 도서의 판매가격을 검색하시오.
SELECT	name, saleprice
FROM	Customer, Orders
WHERE	Customer.custid=Orders.custid;

-- [질의 3-24] 고객별로 주문한 모든 도서의 총 판매액을 구하고, 고객별로 정렬하시오.
SELECT	name, SUM(saleprice)
FROM	Customer, Orders
WHERE	Customer.custid=Orders.custid
GROUP BY	Customer.name
ORDER BY	Customer.name;

-- [질의 3-25] 고객의 이름과 고객이 주문한 도서의 이름을 구하시오. 
SELECT	Customer.name, book.bookname
FROM	Customer, Orders, Book
WHERE	Customer.custid=Orders.custid AND Orders.bookid=Book.bookid;

-- [질의 3-26] 가격이 20,000원인 도서를 주문한 고객의 이름과 도서의 이름을 구하시오.
SELECT	Customer.name, book.bookname
FROM	Customer, Orders, Book
WHERE	Customer.custid=Orders.custid AND Orders.bookid=Book.bookid
			AND Book. price=20000;
		
-- [질의 3-27] 도서를 구매하지 않은 고객을 포함하여 
-- 고객의 이름과 고객이 주문한 도서의 판매가격을 구하시오.
SELECT	Customer.name, saleprice
FROM	Customer LEFT OUTER JOIN Orders 
			ON Customer.custid=Orders.custid;

-- [질의 3-28] 가장 비싼 도서의 이름을 보이시오.
SELECT	bookname
FROM	Book
WHERE	price =(SELECT MAX(price) FROM Book);
	        
-- [질의 3-29] 도서를 구매한 적이 있는 고객의 이름을 검색하시오.
SELECT	name
FROM	Customer
WHERE	custid IN (SELECT custid FROM Orders);       

-- [질의 3-30] 대한미디어에서 출판한 도서를 구매한 고객의 이름을 보이시오.
SELECT	name
FROM	Customer
WHERE	custid IN(SELECT	custid
		FROM	Orders
		WHERE	bookid IN(SELECT	bookid
				FROM		Book
				WHERE		publisher='대한미디어'));
				
-- [질의 3-31] 출판사별로 출판사의 평균 도서 가격보다 비싼 도서를 구하시오. 
SELECT	b1.bookname
FROM	Book b1
WHERE	b1.price > (SELECT 	avg(b2.price)
		    FROM	Book b2
		    WHERE	b2.publisher=b1.publisher);	
		  
-- [질의 3-32] 도서를 주문하지 않은 고객의 이름을 보이시오. 
SELECT	name
FROM	Customer
MINUS
SELECT	name
FROM	Customer
WHERE	custid IN (SELECT custid FROM Orders);
		
-- [질의 3-33] 주문이 있는 고객의 이름과 주소를 보이시오.
SELECT	name, address
FROM	Customer cs
WHERE	EXISTS(SELECT *
		FROM	Orders od
		WHERE	cs.custid=od.custid);
		


-- [질의 3-34] 다음과 같은 속성을 가진 NewBook 테이블을 생성하시오. 
-- 정수형은 NUMBER를 사용하며 문자형은 가변형 문자타입인 VARCHAR2을 사용한다. 
CREATE TABLE NewBook(
  bookid	NUMBER, 
  bookname	VARCHAR2(20),
  publisher	VARCHAR2(20),
  price	NUMBER);

-- [질의 3-35] 다음과 같은 속성을 가진 NewCustomer 테이블을 생성하시오.
CREATE TABLE NewCustomer(
  custid	NUMBER	PRIMARY KEY,
  name	VARCHAR2(40),
  address	VARCHAR2(40),
  phone	VARCHAR2(30));

-- [질의 3-36] 다음과 같은 속성을 가진 NewOrders 테이블을 생성하시오.
CREATE TABLE NewOrders(
  orderid	NUMBER,
  custid	NUMBER	NOT NULL,
  bookid	NUMBER	NOT NULL,
  saleprice	NUMBER,
  orderdate	DATE,
  PRIMARY KEY(orderid),
  FOREIGN KEY(custid) REFERENCES NewCustomer(custid) ON DELETE CASCADE);

-- [질의 3-37] NewBook 테이블에 VARCHAR2(13)의 자료형을 가진 isbn 속성을 추가하시오.
ALTER TABLE NewBook ADD isbn VARCHAR2(13);

-- [질의 3-38] NewBook 테이블의 isbn 속성의 데이터 타입을 NUMBER형으로 변경하시오.
ALTER TABLE NewBook MODIFY isbn NUMBER;

-- [질의 3-39] NewBook 테이블의 isbn 속성을 삭제하시오.
ALTER TABLE NewBook DROP COLUMN isbn;

-- [질의 3-40] NewBook 테이블의 bookid 속성에 NOT NULL 제약조건을 적용하시오.
ALTER TABLE NewBook MODIFY bookid NUMBER NOT NULL;

-- [질의 3-41] NewBook 테이블의 bookid 속성을 기본키로 변경하시오. 
ALTER TABLE NewBook ADD PRIMARY KEY(bookid);

-- [질의 3-42] NewBook 테이블을 삭제하시오.
DROP TABLE NewBook;

-- [질의 3-43] NewCustomer 테이블을 삭제하시오. 
-- 만약 삭제가 거절된다면 원인을 파악하고 관련된 테이블을 같이 삭제하시오
-- (NewOrders 테이블이 NewCustomer를 참조하고 있는 상태다).   
DROP TABLE NewCustomer;

DROP TABLE NewOrders;
DROP TABLE NewCustomer;


CREATE TABLE 주문테이블(
주문번호 varchar(16) NOT NULL PRIMARY KEY,
고객번호 varchar(16) NOT NULL,
주문일 varchar(8) NOT NULL,
주문가격 decimal(15,2) NOT NULL,
배송도시 varchar(256),
배송완료일 varchar(8),
결제금액 varchar(8),
할인금액 decimal(15,2) NOT NULL,
적립포인트 decimal(15,2) NOT NULL
);


CREATE TABLE salaries ( 
emp_no INT NOT NULL,
salary INT NOT NULL,
from_date DATE NOT NULL,
to_date DATE,
PRIMARY KEY (emp_no, from_date)
);


INSERT INTO salaries (emp_no, salary, from_date)
VALUES (1002, 4000000, '2017-07-01');

INSERT INTO salaries (emp_no, salary, from_date, to_date) 
VALUES(1002, 2000000, '2012-07-01', '2013-06-30');
INSERT INTO salaries (emp_no, salary, from_date, to_date) 
VALUES(1002, 3000000, '2013-07-01', '2014-06-30');
INSERT INTO salaries (emp_no, salary, from_date, to_date) 
VALUES(1002, 4000000, '2014-07-01', '2015-06-30');


 